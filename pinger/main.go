package main

import (
	"log"
	"time"
)

func main() {
	log.Println("[INFO] –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
	config := LoadConfig()
	log.Println("[INFO] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")

	for {
		log.Println("[INFO] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö...")
		statuses, err := GetContainerStatuses()
		if err != nil {
			log.Printf("[ERROR] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö: %v", err)
			time.Sleep(config.PingInterval)
			continue
		}

		log.Printf("[INFO] –ù–∞–π–¥–µ–Ω–æ %d –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤", len(statuses))

		for _, container := range statuses {
			log.Printf("[INFO] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: ID=%s, IP=%s, –°—Ç–∞—Ç—É—Å=%s, Health=%s",
				container.ID, container.IPAddress, container.Status, container.Health)

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
			finalStatus := "OK"
			if container.Status != "running" || container.Health == "unhealthy" {
				finalStatus = "FAIL"
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
			result := PingResult{
				IPAddress:   container.IPAddress,
				Status:      finalStatus,
				LastChecked: time.Now(), // üí° –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
			}

			log.Printf("[INFO] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∏–Ω–≥–∞: %+v", result)
			err := SendPingResult(result, config.BackendURL)
			if err != nil {
				log.Printf("[ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è %s: %v", container.IPAddress, err)
			} else {
				log.Printf("[INFO] –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è %s", container.IPAddress)
			}
		}

		log.Printf("[INFO] –ñ–¥—ë–º %v –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∏–Ω–≥–æ–º...", config.PingInterval)
		time.Sleep(config.PingInterval)
	}
}
